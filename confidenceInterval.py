import numpy as np
import pandas as pd

# داده نمونه
np.random.seed(42)
import pandas as pd

df = pd.DataFrame(
    {
        "All-Accuracy": [
            0.819997037,
            0.969996701,
            0.839998115,
            0.987998007,
            0.899997980,
            0.997367305,
        ],
        "All-Precision": [
            0.819729701,
            0.969923934,
            0.839738991,
            0.987962098,
            0.899794297,
            0.997368307,
        ],
        "All-Recall": [
            0.820000110,
            0.969990419,
            0.839999239,
            0.988001408,
            0.899995921,
            0.997367305,
        ],
        "All-F1-score": [
            0.819826254,
            0.969956273,
            0.839838261,
            0.987981461,
            0.899882683,
            0.997367228,
        ],
        "Train-Accuracy": [
            0.819751123,
            0.970167531,
            0.839786725,
            0.988019038,
            0.900078695,
            0.997437160,
        ],
        "Train-Precision": [
            0.819486356,
            0.970086184,
            0.839529102,
            0.987977784,
            0.899871428,
            0.997438075,
        ],
        "Train-Recall": [
            0.819767252,
            0.970172949,
            0.839804475,
            0.988028530,
            0.900090466,
            0.997437160,
        ],
        "Train-F1-score": [
            0.819584060,
            0.970128004,
            0.839631203,
            0.988002667,
            0.899965966,
            0.997437088,
        ],
        "Test-Accuracy": [
            0.820980693,
            0.969313381,
            0.840843672,
            0.987913882,
            0.899675122,
            0.997087885,
        ],
        "Test-Precision": [
            0.820706484,
            0.969278278,
            0.840584233,
            0.987900365,
            0.899489947,
            0.997089274,
        ],
        "Test-Recall": [
            0.820931520,
            0.969260286,
            0.840778271,
            0.987892912,
            0.899617724,
            0.997087885,
        ],
        "Test-F1-score": [
            0.820794673,
            0.969269220,
            0.840665960,
            0.987896628,
            0.899549243,
            0.997087785,
        ],
        "Value-Accuracy": [
            0.822240178,
            0.969464364,
            0.841901491,
            0.987981012,
            0.901289432,
            0.997205669,
        ],
        "Value-Precision": [
            0.821820847,
            0.969457926,
            0.841502484,
            0.987990417,
            0.901038566,
            0.997206662,
        ],
        "Value-Recall": [
            0.822179437,
            0.969333040,
            0.841839601,
            0.987918511,
            0.901136746,
            0.997205669,
        ],
        "Value-F1-score": [
            0.821959670,
            0.969393623,
            0.841639999,
            0.987953867,
            0.901086013,
            0.997205567,
        ],
        "Value-Test-Accuracy": [
            0.819721250,
            0.969162402,
            0.839785887,
            0.987846755,
            0.898060867,
            0.996970105,
        ],
        "Value-Test-Precision": [
            0.819561830,
            0.969116598,
            0.839637564,
            0.987821842,
            0.897939648,
            0.996971959,
        ],
        "Value-Test-Recall": [
            0.819684384,
            0.969162198,
            0.839724970,
            0.987853185,
            0.898067955,
            0.996970105,
        ],
        "Value-Test-F1-score": [
            0.819610802,
            0.969138654,
            0.839676187,
            0.987837189,
            0.897994792,
            0.996970014,
        ],
    }
)


def bootstrap_ci(data, n_bootstrap=1000, ci=95):
    boot_means = []
    n = len(data)
    for _ in range(n_bootstrap):
        sample = np.random.choice(data, size=n, replace=True)
        boot_means.append(np.mean(sample))
    lower = np.percentile(boot_means, (100 - ci) / 2)
    upper = np.percentile(boot_means, 100 - (100 - ci) / 2)
    return lower, upper


# گرفتن CI برای هر متریک
results = {}
for col in df.columns:
    results[col] = bootstrap_ci(df[col], n_bootstrap=1000, ci=95)

# نمایش نتایج
for metric, (low, high) in results.items():
    print(f"{metric}: 95% CI = ({low:.2f}, {high:.2f})")


df_results = pd.DataFrame(results).T
